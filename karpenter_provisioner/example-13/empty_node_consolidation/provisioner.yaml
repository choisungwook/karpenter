apiVersion: karpenter.sh/v1beta1
kind: NodePool
metadata:
  name: example13-empty-node
spec:
  template:
    spec:
      requirements:
      - key: "karpenter.sh/capacity-type"
        operator: In
        values: ["spot"]
      - key: "karpenter.k8s.aws/instance-category"
        operator: In
        values: ["t"]
      nodeClassRef:
        apiVersion: karpenter.k8s.aws/v1beta1
        kind: EC2NodeClass
        name: example13-empty-node
  disruption:
    consolidationPolicy: WhenUnderutilized
    expireAfter: 1m
---
apiVersion: karpenter.k8s.aws/v1beta1
kind: EC2NodeClass
metadata:
  name: example13-empty-node
spec:
  amiFamily: AL2
  # Managed-nodegroup에 설정된 EC2 인스턴스 IAM role을 확인
  role: "eks-from-terraform-eks-worker-node-role"

  subnetSelectorTerms:
  - tags:
      karpenter.sh/discovery: "eks-from-terraform"

  securityGroupSelectorTerms:
  - tags:
      aws:eks:cluster-name: "eks-from-terraform"
      kubernetes.io/cluster/eks-from-terraform: "owned"

  tags:
    env: eks-from-terraform
